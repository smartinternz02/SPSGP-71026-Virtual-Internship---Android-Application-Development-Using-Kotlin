Base Test

package com.example.lunchtray

import androidx.test.core.app.launchActivity
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.matcher.ViewMatchers.withId

open class BaseTest {

    fun fullOrderFlow() {
        // Launch the main activity
        launchActivity<MainActivity>()
        // Start order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Select entree item
        onView(withId(R.id.cauliflower)).perform(click())
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
        // Select side item
        onView(withId(R.id.salad)).perform(click())
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
        // Select accompaniment item
        onView(withId(R.id.bread)).perform(click())
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
    }
}




MenuContentTest


package com.example.lunchtray

import androidx.fragment.app.testing.launchFragmentInContainer
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.espresso.matcher.ViewMatchers.withText
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.MediumTest
import com.example.lunchtray.ui.order.AccompanimentMenuFragment
import com.example.lunchtray.ui.order.EntreeMenuFragment
import com.example.lunchtray.ui.order.SideMenuFragment
import org.hamcrest.CoreMatchers.containsString
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
@MediumTest
class MenuContentTests : BaseTest() {

    /**
     * Test the menu content of the entire [EntreeMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file.
     */
    @Test
    fun `entree_menu_item_content`() {
        // launch the entree menu fragment
        launchFragmentInContainer<EntreeMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Check the cauliflower item
        onView(withId(R.id.cauliflower))
            .check(matches(withText(containsString("Cauliflower"))))
        onView(withId(R.id.cauliflower_description))
            .check(matches(withText(containsString("Whole cauliflower"))))
        onView(withId(R.id.cauliflower_price))
            .check(matches(withText(containsString("$7.00"))))

        // Check the chili item
        onView(withId(R.id.chili))
            .check(matches(withText(containsString("Three Bean Chili"))))
        onView(withId(R.id.chili_description))
            .check(matches(withText(containsString("Black beans"))))
        onView(withId(R.id.chili_price))
            .check(matches(withText(containsString("$4.00"))))

        // Check the pasta item
        onView(withId(R.id.pasta))
            .check(matches(withText(containsString("Mushroom Pasta"))))
        onView(withId(R.id.pasta_description))
            .check(matches(withText(containsString("Penne pasta"))))
        onView(withId(R.id.pasta_price))
            .check(matches(withText(containsString("$5.50"))))

        // Check the skillet item
        onView(withId(R.id.skillet))
            .check(matches(withText(containsString("Spicy Black Bean"))))
        onView(withId(R.id.skillet_description))
            .check(matches(withText(containsString("Seasonal vegetables"))))
        onView(withId(R.id.skillet_price))
            .check(matches(withText(containsString("$5.50"))))
    }

    /**
     * Test the menu content of the entire [SideMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file by reducing the number of
     * functions that would otherwise be necessary to test each item separately.
     */
    @Test
    fun `side_menu_item_content`() {
        // launch the side menu fragment
        launchFragmentInContainer<SideMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Check the salad item
        onView(withId(R.id.salad))
            .check(matches(withText(containsString("Summer Salad"))))
        onView(withId(R.id.salad_description))
            .check(matches(withText(containsString("Heirloom tomatoes"))))
        onView(withId(R.id.salad_price))
            .check(matches(withText(containsString("$2.50"))))

        // Check the soup item
        onView(withId(R.id.soup))
            .check(matches(withText(containsString("Butternut Squash"))))
        onView(withId(R.id.soup_description))
            .check(matches(withText(containsString("Roasted butternut squash"))))
        onView(withId(R.id.soup_price))
            .check(matches(withText(containsString("$3.00"))))

        // Check the potato item
        onView(withId(R.id.potatoes))
            .check(matches(withText(containsString("Spicy Potatoes"))))
        onView(withId(R.id.potato_description))
            .check(matches(withText(containsString("Marble potatoes"))))
        onView(withId(R.id.potato_price))
            .check(matches(withText(containsString("$2.00"))))

        // Check the rice item
        onView(withId(R.id.rice))
            .check(matches(withText(containsString("Coconut Rice"))))
        onView(withId(R.id.rice_description))
            .check(matches(withText(containsString("Rice, coconut milk"))))
        onView(withId(R.id.rice_price))
            .check(matches(withText(containsString("$1.50"))))
    }

    /**
     * Test the menu content of the entire [AccompanimentMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file by reducing the number of
     * functions that would otherwise be necessary to test each item separately.
     */
    @Test
    fun `accompaniment_menu_item_content`() {
        // launch the accompaniment menu fragment
        launchFragmentInContainer<AccompanimentMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Check the bread item
        onView(withId(R.id.bread))
            .check(matches(withText(containsString("Lunch Roll"))))
        onView(withId(R.id.bread_description))
            .check(matches(withText(containsString("Fresh baked"))))
        onView(withId(R.id.bread_price))
            .check(matches(withText(containsString("$0.50"))))

        // Check the berries item
        onView(withId(R.id.berries))
            .check(matches(withText(containsString("Mixed Berries"))))
        onView(withId(R.id.berries_description))
            .check(matches(withText(containsString("Strawberries"))))
        onView(withId(R.id.berries_price))
            .check(matches(withText(containsString("$1.00"))))

        // Check the pickle item
        onView(withId(R.id.pickles))
            .check(matches(withText(containsString("Pickled Veggies"))))
        onView(withId(R.id.pickles_description))
            .check(matches(withText(containsString("Pickled cucumbers"))))
        onView(withId(R.id.pickles_price))
            .check(matches(withText(containsString("$0.50"))))
    }
}



Navigation Test



package com.example.lunchtray

import androidx.fragment.app.testing.launchFragmentInContainer
import androidx.navigation.Navigation
import androidx.navigation.testing.TestNavHostController
import androidx.test.core.app.ApplicationProvider
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.matcher.ViewMatchers.withId
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.LargeTest
import com.example.lunchtray.ui.order.*
import org.junit.Assert.assertEquals
import org.junit.Test
import org.junit.runner.RunWith

/**
 * Tests for all navigation flows
 */
@RunWith(AndroidJUnit4::class)
@LargeTest
class NavigationTests : BaseTest() {

    /**
     * Test navigation from [StartOrderFragment] to [EntreeMenuFragment]
     */
    @Test
    fun `navigate_to_entree_menu_from_start_order`() {
        // Init nav controller
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        // Launch StartOrderFragment
        val startOrderScenario =
            launchFragmentInContainer<StartOrderFragment>(themeResId = R.style.Theme_LunchTray)
        // Configure nav controller
        startOrderScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        // Click start order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Check destination is correct
        assertEquals(navController.currentDestination?.id, R.id.entreeMenuFragment)
    }

    /**
     * Test navigation from [EntreeMenuFragment] to [StartOrderFragment]
     */
    @Test
    fun `navigate_to_start_order_from_entree_menu`() {
        // Init nav controller
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        // Launch EntreeMenuFragment
        val entreeMenuScenario =
            launchFragmentInContainer<EntreeMenuFragment>(themeResId = R.style.Theme_LunchTray)
        // Configure nav controller
        entreeMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            // Destination defaults to the home fragment, we have to explicitly set the current
            // destination
            navController.setCurrentDestination(destId = R.id.entreeMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        // Click the cancel button
        onView(withId(R.id.cancel_button)).perform(click())
        // Check that the destination is correct
        assertEquals(navController.currentDestination?.id, R.id.startOrder)
    }

    /**
     * Test navigation from [EntreeMenuFragment] to [SideMenuFragment]
     */
    @Test
    fun `navigate_to_side_menu_from_entree_menu`() {
        // Init nav controller
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        // Launch the EntreeMenuFragment
        val entreeMenuScenario =
            launchFragmentInContainer<EntreeMenuFragment>(themeResId = R.style.Theme_LunchTray)
        // Configure nav controller
        entreeMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            // Destination defaults to the home fragment, we have to explicitly set the current
            // destination
            navController.setCurrentDestination(destId = R.id.entreeMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        // Click the next button
        onView(withId(R.id.next_button)).perform(click())
        // Check that the destination is correct
        assertEquals(navController.currentDestination?.id, R.id.sideMenuFragment)
    }

    /**
     * Test navigation from [SideMenuFragment] to [StartOrderFragment]
     */
    @Test
    fun `navigate_to_start_order_from_side_menu`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val sideMenuScenario =
            launchFragmentInContainer<SideMenuFragment>(themeResId = R.style.Theme_LunchTray)
        sideMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.sideMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.cancel_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.startOrder)
    }

    /**
     * Test navigation from [SideMenuFragment] to [AccompanimentMenuFragment]
     */
    @Test
    fun `navigate_to_accompaniment_menu_from_side_menu`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val sideMenuScenario =
            launchFragmentInContainer<SideMenuFragment>(themeResId = R.style.Theme_LunchTray)
        sideMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.sideMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.next_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.accompanimentMenuFragment)
    }

    /**
     * Test navigation from [AccompanimentMenuFragment] to [StartOrderFragment]
     */
    @Test
    fun `navigate_to_start_order_from_accompaniment_menu`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val accompanimentMenuScenario =
            launchFragmentInContainer<AccompanimentMenuFragment>(
                themeResId = R.style.Theme_LunchTray)
        accompanimentMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.accompanimentMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.cancel_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.startOrder)
    }

    /**
     * Test navigation from [AccompanimentMenuFragment] to [CheckoutFragment]
     */
    @Test
    fun `navigate_to_checkout_from_accompaniment_menu`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val accompanimentMenuScenario =
            launchFragmentInContainer<AccompanimentMenuFragment>(
                themeResId = R.style.Theme_LunchTray)
        accompanimentMenuScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.accompanimentMenuFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.next_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.checkoutFragment)
    }

    /**
     * Test navigation from [CheckoutFragment] to [StartOrderFragment]
     */
    @Test
    fun `navigate_to_start_order_from_checkout`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val checkoutScenario =
            launchFragmentInContainer<CheckoutFragment>(themeResId = R.style.Theme_LunchTray)
        checkoutScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.checkoutFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.cancel_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.startOrder)
    }

    /**
     * Test Navigation from [CheckoutFragment] to [StartOrderFragment]
     */
    @Test
    fun `navigate_to_start_order_from_checkout_via_submit`() {
        val navController = TestNavHostController(
            ApplicationProvider.getApplicationContext())
        val checkoutScenario =
            launchFragmentInContainer<CheckoutFragment>(themeResId = R.style.Theme_LunchTray)
        checkoutScenario.onFragment{ fragment ->
            navController.setGraph(R.navigation.mobile_navigation)
            navController.setCurrentDestination(destId = R.id.checkoutFragment)
            Navigation.setViewNavController(fragment.requireView(), navController)
        }
        onView(withId(R.id.submit_button)).perform(click())
        assertEquals(navController.currentDestination?.id, R.id.startOrder)
    }
}




Order Functionality Test



package com.example.lunchtray

import androidx.fragment.app.testing.launchFragmentInContainer
import androidx.test.core.app.launchActivity
import androidx.test.espresso.Espresso.onView
import androidx.test.espresso.action.ViewActions.click
import androidx.test.espresso.assertion.ViewAssertions.matches
import androidx.test.espresso.matcher.ViewMatchers.*
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.LargeTest
import com.example.lunchtray.ui.order.AccompanimentMenuFragment
import com.example.lunchtray.ui.order.CheckoutFragment
import com.example.lunchtray.ui.order.EntreeMenuFragment
import com.example.lunchtray.ui.order.SideMenuFragment
import org.hamcrest.core.StringContains.containsString
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
@LargeTest
class OrderFunctionalityTests : BaseTest() {

    /**
     * Test subtotal in [EntreeMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file.
     */
    @Test
    fun `radio_buttons_update_entree_menu_subtotal`() {
        // Launch the entree menu fragment
        launchFragmentInContainer<EntreeMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Select the cauliflower item
        onView(withId(R.id.cauliflower)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $7.00"))))

        // Select the chili item
        onView(withId(R.id.chili)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $4.00"))))

        // Select the pasta item
        onView(withId(R.id.pasta)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $5.50"))))

        // Select the skillet item
        onView(withId(R.id.skillet)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $5.50"))))
    }

    /**
     * Test subtotal in [SideMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file.
     */
    @Test
    fun `radio_buttons_update_side_menu_subtotal`() {
        // Launch the side menu fragment
        launchFragmentInContainer<SideMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Select the salad item
        onView(withId(R.id.salad)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $2.50"))))

        // Select the soup item
        onView(withId(R.id.soup)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $3.00"))))

        // Select the potato item
        onView(withId(R.id.potatoes)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $2.00"))))

        // Select the rice item
        onView(withId(R.id.rice)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $1.50"))))
    }

    /**
     * Test subtotal in [AccompanimentMenuFragment]
     *
     * It isn't necessarily best practice to make all these assertions in a single test,
     * however, it is done here for improved readability of the file.
     */
    @Test
    fun `radio_buttons_update_accompaniment_menu_subtotal`() {
        // Launch the side menu fragment
        launchFragmentInContainer<AccompanimentMenuFragment>(themeResId = R.style.Theme_LunchTray)

        // Select the salad item
        onView(withId(R.id.bread)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $0.50"))))

        // Select the soup item
        onView(withId(R.id.berries)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $1.00"))))

        // Select the potato item
        onView(withId(R.id.pickles)).perform(click())
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $0.50"))))
    }

    /**
     * Test subtotals in full order flow
     */
    @Test
    fun `subtotal_updates_in_full_order_flow`() {
        // Launch the main activity
        launchActivity<MainActivity>()
        // Start order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Select entree item
        onView(withId(R.id.cauliflower)).perform(click())
        // We already have a test for a single menu item selection, so we don't need to check the
        // subtotal here.
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
        // Select side item
        onView(withId(R.id.salad)).perform(click())
        // Check that subtotal has updated
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $9.50"))))
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
        // Select accompaniment item
        onView(withId(R.id.bread)).perform(click())
        // Check that subtotal has updated
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $10.00"))))
        // Move to next fragment
        onView(withId(R.id.next_button)).perform(click())
        // Check that subtotal in checkout is correct
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $10.00"))))
    }

    /**
     * Test subtotal, tax, and total in [CheckoutFragment]
     */
    @Test
    fun `subtotal_tax_total_in_checkout`() {
        // Select items and move to checkout
        fullOrderFlow()
        // Check subtotal. Note that this is already done in a separate test, but the other values
        // depend on it so this assertion is a sanity check
        onView(withId(R.id.subtotal))
            .check(matches(withText(containsString("Subtotal: $10.00"))))
        // Check tax
        onView(withId(R.id.tax))
            .check(matches(withText(containsString("Tax: $0.80"))))
        // Check total
        onView(withId(R.id.total))
            .check(matches(withText(containsString("Total: $10.80"))))
    }

    /**
     * Test that the order is reset after canceling in [EntreeMenuFragment]
     */
    @Test
    fun `order_reset_after_cancel_from_entree_menu`() {
        // Launch the app
        launchActivity<MainActivity>()
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Select an item
        onView(withId(R.id.cauliflower)).perform(click())
        // Cancel order
        onView(withId(R.id.cancel_button)).perform(click())
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Make sure subtotal is zero
        onView(withText("Subtotal: $0.00")).check(matches(isDisplayed()))
    }

    /**
     * Test that the order is reset after canceling in [SideMenuFragment]
     */
    @Test
    fun `order_reset_after_cancel_from_side_menu`() {
        // Launch the app
        launchActivity<MainActivity>()
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Select an item
        onView(withId(R.id.cauliflower)).perform(click())
        // Move to side menu
        onView(withId(R.id.next_button)).perform(click())
        // Select an item
        onView(withId(R.id.soup)).perform(click())
        // Cancel the order
        onView(withId(R.id.cancel_button)).perform(click())
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Make sure subtotal is zero
        onView(withText("Subtotal: $0.00")).check(matches(isDisplayed()))
    }

    /**
     * Test that the order is reset after canceling in [AccompanimentMenuFragment]
     */
    @Test
    fun `order_reset_after_cancel_from_accompaniment_menu`() {
        // Launch the app
        launchActivity<MainActivity>()
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Select an item
        onView(withId(R.id.cauliflower)).perform(click())
        // Move to side menu
        onView(withId(R.id.next_button)).perform(click())
        // Select an item
        onView(withId(R.id.soup)).perform(click())
        // Move to accompaniment menu
        onView(withId(R.id.next_button)).perform(click())
        // Select item
        onView(withId(R.id.bread)).perform(click())
        // Cancel the order
        onView(withId(R.id.cancel_button)).perform(click())
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Make sure subtotal is zero
        onView(withText("Subtotal: $0.00")).check(matches(isDisplayed()))
    }

    /**
     * Test that the order is reset after canceling in [CheckoutFragment]
     */
    @Test
    fun `order_reset_after_cancel_from_checkout`() {
        // Select items and move to checkout
        fullOrderFlow()
        // Cancel the order
        onView(withId(R.id.cancel_button)).perform(click())
        // Start the order
        onView(withId(R.id.start_order_btn)).perform(click())
        // Make sure subtotal is zero
        onView(withText("Subtotal: $0.00")).check(matches(isDisplayed()))
    }

    /**
     * Test that the correct snackbar is displayed when order is submitted
     */
    @Test
    fun `order_snackbar`() {
        // Select items and move to checkout
        fullOrderFlow()
        // Click submit
        onView(withId(R.id.submit_button)).perform(click())
        // Check for snackbar text
        onView(withText(containsString("Order Submitted!")))
            .check(matches(isDisplayed()))
    }
}


Main Activity



package com.example.lunchtray

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.navigation.NavController
import com.example.lunchtray.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    // Binding object instance corresponding to the activity_main.xml layout
    // when the view hierarchy is attached to the fragment.
    private lateinit var binding: ActivityMainBinding
    private lateinit var navController: NavController

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // TODO: Retrieve NavController from the NavHostFragment
    }
}

